//
//  HYBaseService.m
//  HaoYuClient
//
//  Created by 刘文强 on 2018/5/21.
//  Copyright © 2018年 LWQ. All rights reserved.
//

#import "HYBaseService.h"

@implementation HYBaseService
    
+ (instancetype)share{
    static dispatch_once_t t;
    static HYBaseService *service       = nil;
    dispatch_once(&t, ^{
        service                         = [[HYBaseService alloc] init];
    });
    return service;
}
    
/**
 *  请求数据成功的处理
 *
 *  @param dictionary                   请求回来的数据
 *  @param requestInfoModel             请求task
 *  @param sucBlock                     如果一切正常则会执行该block
 *  @param failBlock                    出现其它错误时执行(例如:请求虽然成功,但出现必填参数为空)
 */
- (void)handleRequestSuccess:(NSDictionary *)dictionary
            requestModel:(HYProjectNetRequestInfo *)requestInfoModel
                sucBlock:(HYNetRequestSuccessBlock)sucBlock
               failBlock:(HYNetRequestFailureBlock)failBlock
{
    /**
     200    请求成功
     207    未登录。需要登录
     99     未获取到请求的资源
     404    网络异常
     */
    NSDictionary *dict = dictionary[@"status"];
    NSString *status = [NSString stringWithFormat:@"%@",[dict objectForKey:@"code"]];
    /**
     *  如果状态为207，表示未登录状态
     */
    if ([status isEqualToString:@"207"]) {
        if (failBlock) {
            
            /**
             *  TODO:初始化错误信息，失败回调
             */
            HYNetRequestError *error                          = [self errorWithErrorInfo:dict[@"msg"]
                                                                                  domain:@"未登录"
                                                                                    code:-5];
            [HYUserInfor_LocalData LoginWithVC:nil];
            failBlock (error,requestInfoModel);
        }
        return;
    }
    
  
    /**
     *  TODO:获取与后台约定状态码，通过状态码判断是否请求成功
     *  当前status为服务器返回的JSON对象中
     *  需根据服务器具体情况来确定从哪里获取status
     */
    if ([status isEqualToString:@"200"]) {
        if (dictionary) {
            if (sucBlock){
                sucBlock (dictionary,requestInfoModel);
            }
        }else{
            if (failBlock) {
                
                /**
                 *  TODO:初始化错误信息，失败回调
                 */
                HYNetRequestError *error                          = [self errorWithErrorInfo:dict[@"msg"]
                                                                                      domain:@"请求返回状态成功，但数据为空"
                                                                                        code:-2];
//                    [[YBTopAlert sharedAlert] showAlertWithTitleStringKey:ALERT_TITLE_ERROR_STRINGKEY
//                                                            tipsStringKey:ZJSTRING(@"请求返回状态成功，但数据为空")
//                                                                     type:YBTopAlertError
//                                                       eventCallBackBlock:^(id sender) {
//
//                                                       }];
                LWLog(@"异常回调信息：%@",requestInfoModel);
                failBlock (error,requestInfoModel);
            }
        }
        return;
    }
    
    /**
     *  TODO:其他异常，根据服务器情况来写判断条件
     *  从服务器获取错误信息
     */
    if (dict && ([dict objectForKey:@"code"])) {
        if (failBlock) {
            /**
             *  TODO:初始化错误信息，失败回调
             */
            HYNetRequestError *error                              = [self errorWithErrorInfo:dict[@"msg"]? dict[@"msg"] : [NSString stringWithFormat:@"返回数据异常%@", dict] domain:@"请求返回状态不成功"  code:[[dict objectForKey:@"code"] integerValue]];
            LWLog(@"异常回调信息：%@",requestInfoModel);
            failBlock (error,requestInfoModel);
            NSString *msg = dict[@"msg"];
            ALERT(msg);
            return;
        }
    }
    return;
}

/**
 *  请求数据失败后的处理
 *
 *  @param error     请求失败后返回Error对象
 */
- (void)handleRequestFailed:(NSError *)error
           requestModel:(HYProjectNetRequestInfo *)requestInfoModel
              failBlock:(HYNetRequestFailureBlock)failBlock
{
    if (failBlock) {
        
        /**
         *  判断网络状态，当网络状态为无网络时，抛出异常
         */
        LWLog(@"\n\n\nerror:%zd", [HYProjectNetRequestManager sharedNetRequestManager].currentNetStatus);
        
        /**
         *  TODO:判断当为用户手动取消时，不抛出异常
         */
        
        NSError *customError = [NSError errorWithDomain:error.domain code:error.code userInfo:@{@"userInfo":error.userInfo ? error.userInfo : @"无报错信息"}];
        
        /**
         *  TODO:根据状态码来初始化不同的异常
         */
        failBlock (customError,requestInfoModel);
    }
    
}
    
/**
 *  初始化error的方法封装
 *
 *  @param errorInfo                错误信息
 *  @param domain                   描述
 *  @param code                     错误状态吗
 *  @return                         error对象
 */
- (HYNetRequestError *)errorWithErrorInfo:(NSString *)errorInfo
                                   domain:(NSString *)domain
                                     code:(NSInteger)code
{
    NSDictionary *userInfo = [NSDictionary dictionaryWithObject:errorInfo
                                                         forKey:NETREQUEST_ERRORINFO_KEY];
    HYNetRequestError *resultError = [[HYNetRequestError alloc] initWithDomain:domain
                                                                          code:code
                                                                      userInfo:userInfo];
    return resultError;
}

@end
